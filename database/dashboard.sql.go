// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: dashboard.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getInvoiceCounts = `-- name: GetInvoiceCounts :one
SELECT
    SUM(CASE WHEN payment_status = 'paid' THEN 1 ELSE 0 END)::text AS paid_count,
    SUM(CASE WHEN payment_status = 'unpaid' THEN 1 ELSE 0 END)::text AS unpaid_count,
    SUM(CASE WHEN payment_status = 'partial_paid' THEN 1 ELSE 0 END)::text AS partial_paid_count,
    SUM(CASE WHEN payment_status = 'overdue' THEN 1 ELSE 0 END)::text AS overdue_count
FROM
    invoice
WHERE
    business_id = $1
`

type GetInvoiceCountsRow struct {
	PaidCount        string `db:"paid_count" json:"paid_count"`
	UnpaidCount      string `db:"unpaid_count" json:"unpaid_count"`
	PartialPaidCount string `db:"partial_paid_count" json:"partial_paid_count"`
	OverdueCount     string `db:"overdue_count" json:"overdue_count"`
}

func (q *Queries) GetInvoiceCounts(ctx context.Context, businessID uuid.UUID) (GetInvoiceCountsRow, error) {
	row := q.db.QueryRow(ctx, getInvoiceCounts, businessID)
	var i GetInvoiceCountsRow
	err := row.Scan(
		&i.PaidCount,
		&i.UnpaidCount,
		&i.PartialPaidCount,
		&i.OverdueCount,
	)
	return i, err
}
