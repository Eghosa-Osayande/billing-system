// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: client.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createClient = `-- name: CreateClient :one
INSERT INTO
    client (
       
        business_id,
        fullname,
        email,
        phone
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4
    ) RETURNING id, created_at, updated_at, deleted_at, business_id, fullname, email, phone
`

type CreateClientParams struct {
	BusinessID uuid.UUID `db:"business_id" json:"business_id"`
	Fullname   string    `db:"fullname" json:"fullname"`
	Email      *string   `db:"email" json:"email"`
	Phone      *string   `db:"phone" json:"phone"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, createClient,
		arg.BusinessID,
		arg.Fullname,
		arg.Email,
		arg.Phone,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BusinessID,
		&i.Fullname,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM
    client
WHERE
    id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteClient, id)
	return err
}

const getClientsByBusinessId = `-- name: GetClientsByBusinessId :many
SELECT
    id, created_at, updated_at, deleted_at, business_id, fullname, email, phone
FROM
    client
WHERE
    business_id = $1
ORDER BY
    created_at DESC
`

func (q *Queries) GetClientsByBusinessId(ctx context.Context, businessID uuid.UUID) ([]Client, error) {
	rows, err := q.db.Query(ctx, getClientsByBusinessId, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.BusinessID,
			&i.Fullname,
			&i.Email,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE
    client
SET
    updated_at = timezone('utc', now()),
    fullname = COALESCE($2, fullname),
    email = COALESCE($3, email),
    phone = COALESCE($4, phone)
WHERE
    id = $1 RETURNING id, created_at, updated_at, deleted_at, business_id, fullname, email, phone
`

type UpdateClientParams struct {
	ID       uuid.UUID `db:"id" json:"id"`
	Fullname string    `db:"fullname" json:"fullname"`
	Email    *string   `db:"email" json:"email"`
	Phone    *string   `db:"phone" json:"phone"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, updateClient,
		arg.ID,
		arg.Fullname,
		arg.Email,
		arg.Phone,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BusinessID,
		&i.Fullname,
		&i.Email,
		&i.Phone,
	)
	return i, err
}
