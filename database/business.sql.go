// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: business.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO
	business (
		id,
		created_at,
		business_name,
		business_avatar,
		owner_id
	)
VALUES
	(
		$1,
		timezone('utc', now()),
		$2,
		$3,
		$4
	) RETURNING id, created_at, updated_at, deleted_at, business_name, business_avatar, owner_id
`

type CreateBusinessParams struct {
	ID             uuid.UUID `db:"id" json:"id"`
	BusinessName   string    `db:"business_name" json:"business_name"`
	BusinessAvatar *string   `db:"business_avatar" json:"business_avatar"`
	OwnerID        uuid.UUID `db:"owner_id" json:"owner_id"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.db.QueryRow(ctx, createBusiness,
		arg.ID,
		arg.BusinessName,
		arg.BusinessAvatar,
		arg.OwnerID,
	)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BusinessName,
		&i.BusinessAvatar,
		&i.OwnerID,
	)
	return i, err
}

const findBusinessByUserID = `-- name: FindBusinessByUserID :one
SELECT
	id, created_at, updated_at, deleted_at, business_name, business_avatar, owner_id
FROM
	business
WHERE
	owner_id = $1
LIMIT
	1
`

func (q *Queries) FindBusinessByUserID(ctx context.Context, ownerID uuid.UUID) (Business, error) {
	row := q.db.QueryRow(ctx, findBusinessByUserID, ownerID)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BusinessName,
		&i.BusinessAvatar,
		&i.OwnerID,
	)
	return i, err
}

const updateBusiness = `-- name: UpdateBusiness :one
UPDATE
	business
SET
	updated_at = timezone('utc', now()),
	business_name = $2,
	business_avatar = $3
WHERE
	owner_id = $1 
RETURNING id, created_at, updated_at, deleted_at, business_name, business_avatar, owner_id
`

type UpdateBusinessParams struct {
	OwnerID        uuid.UUID `db:"owner_id" json:"owner_id"`
	BusinessName   string    `db:"business_name" json:"business_name"`
	BusinessAvatar *string   `db:"business_avatar" json:"business_avatar"`
}

func (q *Queries) UpdateBusiness(ctx context.Context, arg UpdateBusinessParams) (Business, error) {
	row := q.db.QueryRow(ctx, updateBusiness, arg.OwnerID, arg.BusinessName, arg.BusinessAvatar)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.BusinessName,
		&i.BusinessAvatar,
		&i.OwnerID,
	)
	return i, err
}
