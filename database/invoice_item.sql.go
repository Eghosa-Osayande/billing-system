// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: invoice_item.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

const createInvoiceItem = `-- name: CreateInvoiceItem :one
INSERT INTO
    invoiceitem (
        invoice_id,
        title,
        price,
        quantity,
        discount,
        discount_type
    )
VALUES
    (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
RETURNING id, created_at, invoice_id, title, price, quantity, discount, discount_type
`

type CreateInvoiceItemParams struct {
	InvoiceID    uuid.UUID        `db:"invoice_id" json:"invoice_id"`
	Title        string           `db:"title" json:"title"`
	Price        decimal.Decimal  `db:"price" json:"price"`
	Quantity     decimal.Decimal  `db:"quantity" json:"quantity"`
	Discount     *decimal.Decimal `db:"discount" json:"discount"`
	DiscountType *string          `db:"discount_type" json:"discount_type"`
}

func (q *Queries) CreateInvoiceItem(ctx context.Context, arg CreateInvoiceItemParams) (Invoiceitem, error) {
	row := q.db.QueryRow(ctx, createInvoiceItem,
		arg.InvoiceID,
		arg.Title,
		arg.Price,
		arg.Quantity,
		arg.Discount,
		arg.DiscountType,
	)
	var i Invoiceitem
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.InvoiceID,
		&i.Title,
		&i.Price,
		&i.Quantity,
		&i.Discount,
		&i.DiscountType,
	)
	return i, err
}

const deleteInvoiceItemByInvoiceID = `-- name: DeleteInvoiceItemByInvoiceID :exec
DELETE FROM
    invoiceitem
WHERE
    invoice_id = $1
`

func (q *Queries) DeleteInvoiceItemByInvoiceID(ctx context.Context, invoiceID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteInvoiceItemByInvoiceID, invoiceID)
	return err
}

const findInvoiceItemsByInvoiceId = `-- name: FindInvoiceItemsByInvoiceId :many
SELECT
    id, created_at, invoice_id, title, price, quantity, discount, discount_type
FROM
    invoiceitem
WHERE
    (invoiceitem.invoice_id = $1)
`

func (q *Queries) FindInvoiceItemsByInvoiceId(ctx context.Context, invoiceID uuid.UUID) ([]Invoiceitem, error) {
	rows, err := q.db.Query(ctx, findInvoiceItemsByInvoiceId, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoiceitem
	for rows.Next() {
		var i Invoiceitem
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.InvoiceID,
			&i.Title,
			&i.Price,
			&i.Quantity,
			&i.Discount,
			&i.DiscountType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
